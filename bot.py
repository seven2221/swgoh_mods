import telebot
import pymysql
import config

db_connection = pymysql.connect(
    host=config.host,
    user=config.user,
    password=config.password,
    database=config.database
)
db_cursor = db_connection.cursor()

bot = telebot.TeleBot(config.token)
bot.delete_webhook()
bot.set_my_commands([
    telebot.types.BotCommand('/start', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
])

module_param1 = None
module_param2 = None
module_param3 = None

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def main_menu(message):
    markup_start = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_start.add('–ù–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –º–æ–¥—É–ª—è')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup_start)

# –ü–æ–∏—Å–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@bot.message_handler(func=lambda message: message.text == '–ù–∞–π—Ç–∏ –º–æ–¥—É–ª–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
def find_modules(message):
    categories = fetch_categories()
    markup_categories = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_categories.add(*categories)
    if categories:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', reply_markup=markup_categories)
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.')

def fetch_categories():
    try:
        sql_query = "SELECT category FROM categories ORDER BY category ASC"
        db_cursor.execute(sql_query)
        categories = [row[0] for row in db_cursor.fetchall()]
        return categories
    except Exception as e:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        return []

@bot.message_handler(func=lambda message: message.text in fetch_categories())
def choose_character_category(message):
    chosen_category = message.text
    character_names = fetch_chars(chosen_category)
    markup_characters = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup_characters.add(*character_names)
    if character_names:
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:', reply_markup=markup_characters)
    else:
        bot.send_message(message.chat.id, '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.')
    bot.register_next_step_handler(message, create_recommendation_handler(chosen_category))

def fetch_chars(chosen_category):
    try:
        sql_query = f"SELECT char_name FROM chars WHERE categories like '%{chosen_category}%' ORDER BY char_name ASC"
        db_cursor.execute(sql_query)
        
        chars = [row[0] for row in db_cursor.fetchall()]
        return chars
    except Exception as e:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')
        return []

def create_recommendation_handler(chosen_category):
    def recommendation_handler(message):
        chosen_character = message.text
        stats_map = {
            '5': '—Å–∫–æ—Ä–æ—Å—Ç—å',
            '48': '%–∞—Ç–∞–∫–∏',
            '49': '%–æ–±–æ—Ä–æ–Ω—ã',
            '55': '%–∑–¥–æ—Ä–æ–≤—å—è',
            '56': '%–∑–∞—â–∏—Ç—ã',
            '54': '–∏–∑–±–µ–≥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∞',
            '53': '%–∫—Ä–∏—Ç—à–∞–Ω—Å–∞',
            '16': '%–∫—Ä–∏—Ç—É—Ä–æ–Ω–∞',
            '17': '%—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
            '9': '%—Å—Ç–æ–π–∫–æ—Å—Ç–∏'
        }
        sets_map = {
            '2': 'üí• –∞—Ç–∞–∫–∞',
            '7': 'üéØ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            '4': 'üèÉ —Å–∫–æ—Ä–æ—Å—Ç—å',
            '1': '‚ûï –∑–¥–æ—Ä–æ–≤—å–µ',
            '8': '‚úä —Å—Ç–æ–π–∫–æ—Å—Ç—å',
            '5': '‚ùå –∫—Ä–∏—Ç—à–∞–Ω—Å',
            '6': '‚ùóÔ∏è –∫—Ä–∏—Ç—É—Ä–æ–Ω',
            '3': 'üõ°Ô∏è –æ–±–æ—Ä–æ–Ω–∞'
        }
        try:
            sql_query = f"SELECT `sets`, `triangle`, `circle`, `cross`, `arrow` FROM chars WHERE char_name='{chosen_character}'"
            db_cursor.execute(sql_query)
            character_stats = db_cursor.fetchone()
            if character_stats:
                sets, triangle, circle, cross, arrow = character_stats
                result_message = f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–µ—Ç—ã –º–æ–¥—É–ª–µ–π:\n{' '.join([sets_map[set] for set in sets.split()])}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å—Ç–∞—Ç—ã –º–æ–¥—É–ª–µ–π:\n–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ - {stats_map[triangle]}\n–ö—Ä—É–≥ - {stats_map[circle]}\n–ö—Ä–µ—Å—Ç - {stats_map[cross]}\n–°—Ç—Ä–µ–ª–∫–∞ - {stats_map[arrow]}"
                bot.send_message(message.chat.id, result_message)
                main_menu(message)
            else:
                bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        except Exception as e:
            bot.send_message(message.chat.id, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.\n{str(e)}')
    return recommendation_handler

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
@bot.message_handler(func=lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –º–æ–¥—É–ª—è')
def check_applicability(message):
    markup1 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup1.add('–°—Ç—Ä–µ–ª–∫–∞', '–ö—Ä–µ—Å—Ç', '–ö—Ä—É–≥', '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º—É –º–æ–¥—É–ª—è:', reply_markup=markup1)

@bot.message_handler(func=lambda message: message.text in ['–°—Ç—Ä–µ–ª–∫–∞', '–ö—Ä–µ—Å—Ç', '–ö—Ä—É–≥', '–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫'])
def choose_param1(message):
    global module_param1
    module_param1 = message.text.lower()
    markup2 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    if module_param1 == '—Å—Ç—Ä–µ–ª–∫–∞':
        markup2.add('–°–∫–æ—Ä–æ—Å—Ç—å', '%–ê—Ç–∞–∫–∏', '%–û–±–æ—Ä–æ–Ω—ã', '%–ó–¥–æ—Ä–æ–≤—å—è', '%–ó–∞—â–∏—Ç—ã', '–ò–∑–±–µ–≥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∞')
    elif module_param1 == '–∫—Ä–µ—Å—Ç':
        markup2.add('%–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '%–°—Ç–æ–π–∫–æ—Å—Ç–∏', '%–ê—Ç–∞–∫–∏', '%–û–±–æ—Ä–æ–Ω—ã', '%–ó–¥–æ—Ä–æ–≤—å—è', '%–ó–∞—â–∏—Ç—ã')
    elif module_param1 == '–∫—Ä—É–≥':
        markup2.add('%–ó–¥–æ—Ä–æ–≤—å—è', '%–ó–∞—â–∏—Ç—ã')
    elif module_param1 == '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫':
        markup2.add('%–ö—Ä–∏—Ç—à–∞–Ω—Å–∞', '%–ö—Ä–∏—Ç—É—Ä–æ–Ω–∞', '%–ê—Ç–∞–∫–∏', '%–û–±–æ—Ä–æ–Ω—ã', '%–ó–¥–æ—Ä–æ–≤—å—è', '%–ó–∞—â–∏—Ç—ã')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –º–æ–¥—É–ª—è:', reply_markup=markup2)

@bot.message_handler(func=lambda message: message.text in ['%–ó–¥–æ—Ä–æ–≤—å—è', '%–ó–∞—â–∏—Ç—ã', '–°–∫–æ—Ä–æ—Å—Ç—å', '%–ê—Ç–∞–∫–∏', '%–û–±–æ—Ä–æ–Ω—ã', '–ò–∑–±–µ–≥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∞', '%–ö—Ä–∏—Ç—à–∞–Ω—Å–∞', '%–ö—Ä–∏—Ç—É—Ä–æ–Ω–∞', '%–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '%–°—Ç–æ–π–∫–æ—Å—Ç–∏'])
def choose_param2(message):
    global module_param2
    module_param2 = message.text.lower()
    markup3 = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup3.add('‚ûï –ó–¥–æ—Ä–æ–≤—å–µ', 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–∞', '‚ùóÔ∏è –ö—Ä–∏—Ç—É—Ä–æ–Ω', '‚ùå –ö—Ä–∏—Ç—à–∞–Ω—Å', '‚úä –°—Ç–æ–π–∫–æ—Å—Ç—å', 'üí• –ê—Ç–∞–∫–∞', 'üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'üèÉ –°–∫–æ—Ä–æ—Å—Ç—å')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç –º–æ–¥—É–ª—è:', reply_markup=markup3)

@bot.message_handler(func=lambda message: message.text in ['‚ûï –ó–¥–æ—Ä–æ–≤—å–µ', 'üõ°Ô∏è –û–±–æ—Ä–æ–Ω–∞', '‚ùóÔ∏è –ö—Ä–∏—Ç—É—Ä–æ–Ω', '‚ùå –ö—Ä–∏—Ç—à–∞–Ω—Å', '‚úä –°—Ç–æ–π–∫–æ—Å—Ç—å', 'üí• –ê—Ç–∞–∫–∞', 'üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 'üèÉ –°–∫–æ—Ä–æ—Å—Ç—å'])
def choose_param3(message):
    global module_param3
    module_param3 = message.text.lower()
    sql_query = f"SELECT char_name FROM chars WHERE `{config.module_form_map[module_param1]}`='{config.module_stats_map[module_param2]}' and `sets` like '%{config.module_sets_map[module_param3]}%'"
    try:
        db_cursor.execute(sql_query)
        results = db_cursor.fetchall()
        if results:
            result_message = '–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ —Ç–∞–∫–æ–π –º–æ–¥—É–ª—å:\n\n'
            for result in results:
                result_message += f'{result[0]}\n'
            bot.send_message(message.chat.id, result_message)
        else:
            bot.send_message(message.chat.id, '–¢–∞–∫–æ–π –º–æ–¥—É–ª—å –Ω–∏–∫–µ–º –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.')
    except Exception as e:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.')

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
@bot.message_handler(commands=['exit'])
def close_connection(message):
    db_cursor.close()
    db_connection.close()
    bot.stop_polling()

bot.polling()